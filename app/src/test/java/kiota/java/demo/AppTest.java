/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package kiota.java.demo;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.time.LocalDateTime;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.util.concurrent.atomic.AtomicInteger;

import org.junit.jupiter.api.Test;

import com.azure.core.credential.TokenCredential;
import com.azure.identity.ClientSecretCredentialBuilder;
import com.google.gson.JsonParser;
import com.microsoft.graph.core.content.BatchRequestContent;
import com.microsoft.graph.core.content.BatchResponseContent;
import com.microsoft.graph.core.models.IProgressCallback;
import com.microsoft.graph.core.models.UploadResult;
import com.microsoft.graph.core.requests.GraphClientFactory;
import com.microsoft.graph.core.tasks.LargeFileUploadTask;
import com.microsoft.graph.core.tasks.PageIterator;
import com.microsoft.graph.drives.item.items.item.createuploadsession.CreateUploadSessionPostRequestBody;
import com.microsoft.graph.models.DriveItem;
import com.microsoft.graph.models.DriveItemUploadableProperties;
import com.microsoft.graph.models.Message;
import com.microsoft.graph.models.MessageCollectionResponse;
import com.microsoft.graph.models.PlannerAssignments;
import com.microsoft.graph.models.UploadSession;
import com.microsoft.graph.models.User;
import com.microsoft.graph.models.odataerrors.ODataError;
import com.microsoft.graph.serviceclient.GraphServiceClient;
import com.microsoft.kiota.ApiException;
import com.microsoft.graph.core.authentication.AzureIdentityAuthenticationProvider;

// import okhttp3.Call;
// import okhttp3.MediaType;
// import okhttp3.OkHttpClient;
// import okhttp3.Protocol;
// import okhttp3.Request;
// import okhttp3.Response;
// import okhttp3.ResponseBody;

import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;
import java.io.InputStream;
import java.io.FileInputStream;
import java.io.File;
import java.net.InetSocketAddress;
import java.net.Proxy;

class AppTest {

    final String USER_ID = "pgichuhi@sk7xg.onmicrosoft.com";


    @Test
    void testLargeFileUploadToOneDrive() {
        try {
            File file = new File("/home/ndiritu/projects/kiota-java-demo/app/src/test/resources/openapi.yaml");
            InputStream fileStream = new FileInputStream(file);
            long streamSize = file.length();

            TokenCredential credential = new ClientSecretCredentialBuilder()
                .clientId(System.getenv("kiota_client_id"))
                .clientSecret(System.getenv("kiota_client_secret"))
                .tenantId(System.getenv("kiota_tenant_id"))
                .build();

            CreateUploadSessionPostRequestBody uploadSessionRequest = new CreateUploadSessionPostRequestBody();
            DriveItemUploadableProperties properties = new DriveItemUploadableProperties();
            properties.getAdditionalData().put("@microsoft.graph.conflictBehavior", "replace");
            uploadSessionRequest.setItem(properties);

            GraphServiceClient client = new GraphServiceClient(credential, ".default");

            String myDriveId = client.users().byUserId(USER_ID).drive().get().getId();
            UploadSession uploadSession = client.drives()
                    .byDriveId(myDriveId)
                    .items()
                    .byDriveItemId("root:/test/:")
                    .createUploadSession()
                    .post(uploadSessionRequest);

            int maxSliceSize = 320 * 10;
            LargeFileUploadTask<DriveItem> largeFileUploadTask = new LargeFileUploadTask<>(
                    client.getRequestAdapter(),
                    uploadSession,
                    fileStream,
                    streamSize,
                    maxSliceSize,
                    DriveItem::createFromDiscriminatorValue);

            int maxAttempts = 5;
            // Create a callback used by the upload provider
            IProgressCallback callback = (current, max) -> System.out.println(
                        String.format("Uploaded %d bytes of %d total bytes", current, max));

            // Do the upload
            UploadResult<DriveItem> uploadResult = largeFileUploadTask.upload(maxAttempts, callback);
            if (uploadResult.isUploadSuccessful()) {
                System.out.println("Upload complete");
                System.out.println("Item ID: " + uploadResult.itemResponse.getId());
            } else {
                System.out.println("Upload failed");
            }

        } catch (Exception exception) {
            System.out.println(exception.getMessage());
        }
    }




    // @Test void testErrorHandling() {
    //     TokenCredential credential = new ClientSecretCredentialBuilder()
    //         .clientId(System.getenv("kiota_client_id"))
    //         .clientSecret(System.getenv("kiota_client_secret"))
    //         .tenantId(System.getenv("kiota_tenant_id"))
    //         .build();

    //     GraphServiceClient client = new GraphServiceClient(credential, ".default");
    //     try {
    //         // Gets invalid user
    //         // User user = client.users().byUserId("invalidUser@sk7xg.onmicrosoft.com").get();
    //         var sites = client.sites().get();
    //         System.out.println("done");
    //         } catch (ODataError err) {
    //             System.out.println(err.getError().getCode());
    //             System.out.println(err.getResponseStatusCode());
    //             System.out.println(err.getMessage());
    //         }
    // }

    // @Test void testPageIterator() {
    //     TokenCredential credential = new ClientSecretCredentialBuilder()
    //         .clientId(System.getenv("kiota_client_id"))
    //         .clientSecret(System.getenv("kiota_client_secret"))
    //         .tenantId(System.getenv("kiota_tenant_id"))
    //         .build();

    //     GraphServiceClient client = new GraphServiceClient(credential, ".default");
    //     try {
    //         MessageCollectionResponse messages = client.users().byUserId("pgichuhi@sk7xg.onmicrosoft.com").messages().get();

    //         AtomicInteger numMessages = new AtomicInteger(0);

    //         // Default page size is 10 messages

    //         PageIterator<Message, MessageCollectionResponse> pageIterator = new PageIterator.Builder<Message, MessageCollectionResponse>()
    //                                 .client(client)
    //                                 .collectionPage(messages)
    //                                 .collectionPageFactory(MessageCollectionResponse::createFromDiscriminatorValue)
    //                                 .processPageItemCallback(message -> {
    //                                     System.out.println("MsgNumber: " + numMessages.incrementAndGet() + " Subject: " + message.getSubject());
    //                                     return true;
    //                                 })
    //                                 .build();
    //         pageIterator.iterate();

    //         System.out.println("Num of messages: " + numMessages.get());

    //     } catch (Exception ex) {
    //         System.out.println(ex.getMessage());
    //     }
    // }

    // @Test
    // void testBatchRequest() {
    //     TokenCredential credential = new ClientSecretCredentialBuilder()
    //         .clientId(System.getenv("kiota_client_id"))
    //         .clientSecret(System.getenv("kiota_client_secret"))
    //         .tenantId(System.getenv("kiota_tenant_id"))
    //         .build();

    //     GraphServiceClient client = new GraphServiceClient(credential, ".default");
    //     try {
    //         List<Message> messagesToUpdate = new ArrayList<>();

    //         for (Message message : client.users().byUserId(USER_ID).messages().get().getValue()) {
    //             message.setIsRead(!message.getIsRead());
    //             messagesToUpdate.add(message);
    //             break;
    //         }

    //         BatchRequestContent batchRequestContent = new BatchRequestContent(client);
    //         messagesToUpdate.forEach(message -> {
    //             client.users().byUserId(USER_ID).messages().byMessageId(message.getId()).patch(message);
    //             // batchRequestContent.addBatchRequestStep(client.users().byUserId(USER_ID).messages().byMessageId(message.getId()).toPatchRequestInformation(message));
    //         });

    //         BatchResponseContent batchResponseContent = client.getBatchRequestBuilder().post(batchRequestContent, null);
    //         var responses = batchResponseContent.getResponses();
    //     } catch (ApiException ex) {
    //         System.out.println(ex.getMessage());
    //     } catch (Exception ex) {
    //         System.out.println(ex.getMessage());
    //     }
    // }

    // @Test
    // void testPatchEmail() {
    //     TokenCredential credential = new ClientSecretCredentialBuilder()
    //         .clientId(System.getenv("kiota_client_id"))
    //         .clientSecret(System.getenv("kiota_client_secret"))
    //         .tenantId(System.getenv("kiota_tenant_id"))
    //         .build();

    //     GraphServiceClient client = new GraphServiceClient(credential, ".default");
    //     try {
    //         Message testMsg = new Message();
    //         testMsg.setSubject("Test Subject");

    //         Message newMessage = client.users().byUserId(USER_ID).messages().post(testMsg);
    //         System.out.println("Successful post! Id=" + newMessage.getId() + ", subject=" + newMessage.getSubject());

    //         var patchMessage = new Message();
    //         // patchMessage.setSubject("ANOTHER SUBJECT!");
    //         var updatedMessage = client.users().byUserId(USER_ID).messages().byMessageId(newMessage.getId()).patch(patchMessage);
    //         System.out.println("Successful patch! Id=" + updatedMessage.getId() + ", subject=" + updatedMessage.getSubject());


    //     } catch (ApiException ex) {
    //         System.out.println(ex.getMessage());
    //     } catch (Exception ex) {
    //         System.out.println(ex.getMessage());
    //     }
    // }

    // @Test
    // void testExpandSessionsInCallRecord() {
    //     TokenCredential credential = new ClientSecretCredentialBuilder()
    //         .clientId(System.getenv("kiota_client_id"))
    //         .clientSecret(System.getenv("kiota_client_secret"))
    //         .tenantId(System.getenv("kiota_tenant_id"))
    //         .build();

    //     GraphServiceClient client = new GraphServiceClient(credential, ".default");
    //     try {
    //         var callRecords = client.communications().callRecords().get();
    //         for (var callRecord : callRecords.getValue()) {
    //             System.out.println("Call record id: " + callRecord.getId());
    //             var sessions = client.communications().callRecords().byCallRecordId(callRecord.getId()).sessions().get(
    //                 requestConfig -> {
    //                     requestConfig.queryParameters.expand = new String[] {"segments"};
    //                 }
    //             ).getValue();
    //             for (var session : sessions) {
    //                 System.out.println("Session id: " + session.getId());
    //                 var segments = session.getSegments();
    //                 for (var segment : segments) {
    //                     System.out.println("Segment id: " + segment.getId());
    //                 }
    //             }
    //         }
    //     } catch (ApiException ex) {
    //         System.out.println(ex.getMessage());
    //     } catch (Exception ex) {
    //         System.out.println(ex.getMessage());
    //     }
    // }

    // @Test
    // void testExpandSegmentUsingMock() {
    //     TokenCredential credential = new ClientSecretCredentialBuilder()
    //         .clientId(System.getenv("kiota_client_id"))
    //         .clientSecret(System.getenv("kiota_client_secret"))
    //         .tenantId(System.getenv("kiota_tenant_id"))
    //         .build();

    //     try {
    //         var mockHttpClient = getMockHttpClient();
    //         GraphServiceClient client = new GraphServiceClient(
    //             new AzureIdentityAuthenticationProvider(credential, new String[] {}, ".default"),
    //             mockHttpClient
    //         );

    //         // var callRecords = client.communications().callRecords().get();
    //         // for (var callRecord : callRecords.getValue()) {
    //         //     System.out.println("Call record id: " + callRecord.getId());
    //             var sessions = client.communications().callRecords().byCallRecordId("id").sessions().get(
    //                 requestConfig -> {
    //                     requestConfig.queryParameters.expand = new String[] {"segments"};
    //                 }
    //             ).getValue();
    //             for (var session : sessions) {
    //                 System.out.println("Session id: " + session.getId());
    //                 var segments = session.getSegments();
    //                 for (var segment : segments) {
    //                     System.out.println("Segment id: " + segment.getId());
    //                 }
    //             }
    //         // }
    //     } catch (ApiException ex) {
    //         System.out.println(ex.getMessage());
    //     } catch (Exception ex) {
    //         System.out.println(ex.getMessage());
    //     }
    // }

    // @Test
    // void createPlannerTask() {
    //     TokenCredential credential = new ClientSecretCredentialBuilder()
    //         .clientId(System.getenv("kiota_client_id"))
    //         .clientSecret(System.getenv("kiota_client_secret"))
    //         .tenantId(System.getenv("kiota_tenant_id"))
    //         .build();

    //     GraphServiceClient client = new GraphServiceClient(credential, ".default");
    //     try {
    //         var task = new com.microsoft.graph.models.PlannerTask();
    //         task.setPlanId("Rr9IbmXPmkeLOUWMYUEpp2UACmbZ");
    //         task.setTitle("Task 1");
    //         PlannerAssignments assignments = new PlannerAssignments();
    //         HashMap<String, Object> additionalData = new HashMap<>();
    //         // additionalData.put(USER_ID, "{\"@odata.type\":\"#microsoft.graph.plannerAssignment\",\"orderHint\":\" !\"}");
    //         additionalData.put(USER_ID, JsonParser.parseString("{\"@odata.type\":\"#microsoft.graph.plannerAssignment\",\"orderHint\":\" !\"}").getAsJsonObject());
    //         assignments.setAdditionalData(additionalData);
    //         task.setAssignments(assignments);
    //         var newTask = client.users().byUserId(USER_ID).planner().tasks().post(task);
    //         System.out.println("Task created! Id=" + newTask.getId() + ", title=" + newTask.getTitle());
    //     } catch (ApiException ex) {
    //         System.out.println(ex.getMessage());
    //     } catch (Exception ex) {
    //         System.out.println(ex.getMessage());
    //     }
    // }

    // OkHttpClient getMockHttpClient() throws Exception {
    //     final OkHttpClient okHttpClient = mock(OkHttpClient.class);

    //     final Call remoteCall = mock(Call.class);

    //     final String responseBody = "{\r\n" + //
    //                     "    \"@odata.context\": \"https://graph.microsoft.com/v1.0/$metadata#communications/callRecords('e523d2ed-2966-4b6b-925b-754a88034cc5')/sessions\",\r\n" + //
    //                     "    \"value\": [\r\n" + //
    //                     "        {\r\n" + //
    //                     "            \"id\": \"e523d2ed-2966-4b6b-925b-754a88034cc5\",\r\n" + //
    //                     "            \"modalities\": [\r\n" + //
    //                     "                \"audio\"\r\n" + //
    //                     "            ],\r\n" + //
    //                     "            \"startDateTime\": \"2020-02-25T18:52:21.2169889Z\",\r\n" + //
    //                     "            \"endDateTime\": \"2020-02-25T18:52:46.7640013Z\",\r\n" + //
    //                     "            \"isTest\": false,\r\n" + //
    //                     "            \"caller\": {\r\n" + //
    //                     "                \"@odata.type\": \"#microsoft.graph.callRecords.participantEndpoint\",\r\n" + //
    //                     "                \"name\": \"machineName_1\",\r\n" + //
    //                     "                \"cpuName\": \"AMD EPYC 7452 32-Core Processor\",\r\n" + //
    //                     "                \"cpuCoresCount\": 8,\r\n" + //
    //                     "                \"cpuProcessorSpeedInMhz\": 2346,\r\n" + //
    //                     "                \"userAgent\": {\r\n" + //
    //                     "                    \"@odata.type\": \"#microsoft.graph.callRecords.clientUserAgent\",\r\n" + //
    //                     "                    \"headerValue\": \"RTCC/7.0.0.0 UCWA/7.0.0.0 AndroidLync/6.25.0.27 (SM-G930U Android 8.0.0)\",\r\n" + //
    //                     "                    \"platform\": \"android\",\r\n" + //
    //                     "                    \"productFamily\": \"skypeForBusiness\"\r\n" + //
    //                     "                },\r\n" + //
    //                     "                \"identity\": {\r\n" + //
    //                     "                    \"@odata.type\": \"#microsoft.graph.identitySet\",\r\n" + //
    //                     "                    \"user\": {\r\n" + //
    //                     "                        \"id\": \"821809f5-0000-0000-0000-3b5136c0e777\",\r\n" + //
    //                     "                        \"displayName\": \"Abbie Wilkins\",\r\n" + //
    //                     "                        \"tenantId\": \"dc368399-474c-4d40-900c-6265431fd81f\"\r\n" + //
    //                     "                    }\r\n" + //
    //                     "                }\r\n" + //
    //                     "            },\r\n" + //
    //                     "            \"callee\": {\r\n" + //
    //                     "                \"@odata.type\": \"#microsoft.graph.callRecords.participantEndpoint\",\r\n" + //
    //                     "                \"name\": \"machineName_2\",\r\n" + //
    //                     "                \"cpuName\": \"Intel(R) Xeon(R) Platinum 8272CL CPU @ 2.60GHz\",\r\n" + //
    //                     "                \"cpuCoresCount\": 2,\r\n" + //
    //                     "                \"cpuProcessorSpeedInMhz\": 2594,\r\n" + //
    //                     "                \"userAgent\": {\r\n" + //
    //                     "                    \"@odata.type\": \"#microsoft.graph.callRecords.clientUserAgent\",\r\n" + //
    //                     "                    \"headerValue\": \"UCCAPI/16.0.12527.20122 OC/16.0.12527.20194 (Skype for Business)\",\r\n" + //
    //                     "                    \"platform\": \"windows\",\r\n" + //
    //                     "                    \"productFamily\": \"skypeForBusiness\"\r\n" + //
    //                     "                },\r\n" + //
    //                     "                \"identity\": {\r\n" + //
    //                     "                    \"user\": {\r\n" + //
    //                     "                        \"id\": \"f69e2c00-0000-0000-0000-185e5f5f5d8a\",\r\n" + //
    //                     "                        \"displayName\": \"Owen Franklin\",\r\n" + //
    //                     "                        \"tenantId\": \"dc368399-474c-4d40-900c-6265431fd81f\"\r\n" + //
    //                     "                    }\r\n" + //
    //                     "                },\r\n" + //
    //                     "                \"feedback\": {\r\n" + //
    //                     "                    \"rating\": \"poor\",\r\n" + //
    //                     "                    \"tokens\": {\r\n" + //
    //                     "                        \"NoSound\": false,\r\n" + //
    //                     "                        \"OtherNoSound\": false,\r\n" + //
    //                     "                        \"Echo\": false,\r\n" + //
    //                     "                        \"Noisy\": true,\r\n" + //
    //                     "                        \"LowVolume\": false,\r\n" + //
    //                     "                        \"Stopped\": false,\r\n" + //
    //                     "                        \"DistortedSound\": false,\r\n" + //
    //                     "                        \"Interruptions\": false\r\n" + //
    //                     "                    }\r\n" + //
    //                     "                }\r\n" + //
    //                     "            },\r\n" + //
    //                     "            \"segments\": [\r\n" + //
    //                     "                {\r\n" + //
    //                     "                    \"startDateTime\": \"2020-02-25T18:52:21.2169889Z\",\r\n" + //
    //                     "                    \"endDateTime\": \"2020-02-25T18:52:46.7640013Z\",\r\n" + //
    //                     "                    \"id\": \"e523d2ed-2966-4b6b-925b-754a88034cc5\",\r\n" + //
    //                     "                    \"caller\": {\r\n" + //
    //                     "                        \"@odata.type\": \"#microsoft.graph.callRecords.participantEndpoint\",\r\n" + //
    //                     "                        \"name\": \"machineName_1\",\r\n" + //
    //                     "                        \"cpuName\": \"AMD EPYC 7452 32-Core Processor\",\r\n" + //
    //                     "                        \"cpuCoresCount\": 8,\r\n" + //
    //                     "                        \"cpuProcessorSpeedInMhz\": 2346,\r\n" + //
    //                     "                        \"userAgent\": {\r\n" + //
    //                     "                            \"@odata.type\": \"#microsoft.graph.callRecords.clientUserAgent\",\r\n" + //
    //                     "                            \"headerValue\": \"RTCC/7.0.0.0 UCWA/7.0.0.0 AndroidLync/6.25.0.27 (SM-G930U Android 8.0.0)\",\r\n" + //
    //                     "                            \"platform\": \"android\",\r\n" + //
    //                     "                            \"productFamily\": \"skypeForBusiness\"\r\n" + //
    //                     "                        },\r\n" + //
    //                     "                        \"identity\": {\r\n" + //
    //                     "                            \"user\": {\r\n" + //
    //                     "                                \"id\": \"821809f5-0000-0000-0000-3b5136c0e777\",\r\n" + //
    //                     "                                \"displayName\": \"Abbie Wilkins\",\r\n" + //
    //                     "                                \"tenantId\": \"dc368399-474c-4d40-900c-6265431fd81f\"\r\n" + //
    //                     "                            }\r\n" + //
    //                     "                        }\r\n" + //
    //                     "                    },\r\n" + //
    //                     "                    \"callee\": {\r\n" + //
    //                     "                        \"@odata.type\": \"#microsoft.graph.callRecords.participantEndpoint\",\r\n" + //
    //                     "                        \"@odata.type\": \"#microsoft.graph.callRecords.participantEndpoint\",\r\n" + //
    //                     "                        \"name\": \"machineName_2\",\r\n" + //
    //                     "                        \"cpuName\": \"Intel(R) Xeon(R) Platinum 8272CL CPU @ 2.60GHz\",\r\n" + //
    //                     "                        \"cpuCoresCount\": 2,\r\n" + //
    //                     "                        \"userAgent\": {\r\n" + //
    //                     "                            \"@odata.type\": \"#microsoft.graph.callRecords.clientUserAgent\",\r\n" + //
    //                     "                            \"headerValue\": \"UCCAPI/16.0.12527.20122 OC/16.0.12527.20194 (Skype for Business)\",\r\n" + //
    //                     "                            \"platform\": \"windows\",\r\n" + //
    //                     "                            \"productFamily\": \"skypeForBusiness\"\r\n" + //
    //                     "                        },\r\n" + //
    //                     "                        \"identity\": {\r\n" + //
    //                     "                            \"user\": {\r\n" + //
    //                     "                                \"id\": \"f69e2c00-0000-0000-0000-185e5f5f5d8a\",\r\n" + //
    //                     "                                \"displayName\": \"Owen Franklin\",\r\n" + //
    //                     "                                \"tenantId\": \"dc368399-474c-4d40-900c-6265431fd81f\"\r\n" + //
    //                     "                            }\r\n" + //
    //                     "                        }\r\n" + //
    //                     "                    },\r\n" + //
    //                     "                    \"media\": [\r\n" + //
    //                     "                        {\r\n" + //
    //                     "                            \"label\": \"main-audio\",\r\n" + //
    //                     "                            \"callerNetwork\": {\r\n" + //
    //                     "                                \"ipAddress\": \"10.150.0.2\",\r\n" + //
    //                     "                                \"subnet\": \"10.150.0.0\",\r\n" + //
    //                     "                                \"linkSpeed\": 54000000,\r\n" + //
    //                     "                                \"connectionType\": \"wifi\",\r\n" + //
    //                     "                                \"port\": 27288,\r\n" + //
    //                     "                                \"reflexiveIPAddress\": \"127.0.0.2\",\r\n" + //
    //                     "                                \"relayIPAddress\": \"52.114.188.32\",\r\n" + //
    //                     "                                \"relayPort\": 53889,\r\n" + //
    //                     "                                \"macAddress\": \"00-00-00-00-00-00\",\r\n" + //
    //                     "                                \"dnsSuffix\": null,\r\n" + //
    //                     "                                \"sentQualityEventRatio\": 0,\r\n" + //
    //                     "                                \"receivedQualityEventRatio\": 0.27,\r\n" + //
    //                     "                                \"delayEventRatio\": 0,\r\n" + //
    //                     "                                \"bandwidthLowEventRatio\": 0\r\n" + //
    //                     "                            },\r\n" + //
    //                     "                            \"calleeNetwork\": {\r\n" + //
    //                     "                                \"ipAddress\": \"10.139.0.12\",\r\n" + //
    //                     "                                \"subnet\": \"10.139.80.0\",\r\n" + //
    //                     "                                \"linkSpeed\": 4294967295,\r\n" + //
    //                     "                                \"connectionType\": \"wired\",\r\n" + //
    //                     "                                \"port\": 50011,\r\n" + //
    //                     "                                \"reflexiveIPAddress\": \"127.0.0.2\",\r\n" + //
    //                     "                                \"relayIPAddress\": \"52.114.188.102\",\r\n" + //
    //                     "                                \"relayPort\": 52810,\r\n" + //
    //                     "                                \"macAddress\": \"00-00-00-00-00-00-00-00\",\r\n" + //
    //                     "                                \"dnsSuffix\": null,\r\n" + //
    //                     "                                \"sentQualityEventRatio\": 0.31,\r\n" + //
    //                     "                                \"receivedQualityEventRatio\": 0,\r\n" + //
    //                     "                                \"delayEventRatio\": 0,\r\n" + //
    //                     "                                \"bandwidthLowEventRatio\": 0\r\n" + //
    //                     "                            },\r\n" + //
    //                     "                            \"callerDevice\": {\r\n" + //
    //                     "                                \"captureDeviceName\": \"Default input device\",\r\n" + //
    //                     "                                \"renderDeviceName\": \"Default output device\",\r\n" + //
    //                     "                                \"receivedSignalLevel\": -10,\r\n" + //
    //                     "                                \"receivedNoiseLevel\": -68,\r\n" + //
    //                     "                                \"initialSignalLevelRootMeanSquare\": 60.25816,\r\n" + //
    //                     "                                \"renderZeroVolumeEventRatio\": 1,\r\n" + //
    //                     "                                \"renderMuteEventRatio\": 1,\r\n" + //
    //                     "                                \"micGlitchRate\": 23,\r\n" + //
    //                     "                                \"speakerGlitchRate\": 3830\r\n" + //
    //                     "                            },\r\n" + //
    //                     "                            \"calleeDevice\": {\r\n" + //
    //                     "                                \"captureDeviceName\": \"Microphone (Microsoft Virtual Audio Device (Simple) (WDM))\",\r\n" + //
    //                     "                                \"captureDeviceDriver\": \"Microsoft: 5.0.8638.1100\",\r\n" + //
    //                     "                                \"renderDeviceName\": \"Speakers (Microsoft Virtual Audio Device (Simple) (WDM))\",\r\n" + //
    //                     "                                \"renderDeviceDriver\": \"Microsoft: 5.0.8638.1100\",\r\n" + //
    //                     "                                \"receivedSignalLevel\": -14,\r\n" + //
    //                     "                                \"receivedNoiseLevel\": -86,\r\n" + //
    //                     "                                \"initialSignalLevelRootMeanSquare\": 146.7885,\r\n" + //
    //                     "                                \"micGlitchRate\": 143,\r\n" + //
    //                     "                                \"speakerGlitchRate\": 182\r\n" + //
    //                     "                            },\r\n" + //
    //                     "                            \"streams\": [\r\n" + //
    //                     "                                {\r\n" + //
    //                     "                                    \"streamId\": \"1504545584\",\r\n" + //
    //                     "                                    \"streamDirection\": \"callerToCallee\",\r\n" + //
    //                     "                                    \"averageAudioDegradation\": null,\r\n" + //
    //                     "                                    \"averageJitter\": \"PT0.016S\",\r\n" + //
    //                     "                                    \"maxJitter\": \"PT0.021S\",\r\n" + //
    //                     "                                    \"averagePacketLossRate\": 0,\r\n" + //
    //                     "                                    \"maxPacketLossRate\": 0,\r\n" + //
    //                     "                                    \"averageRatioOfConcealedSamples\": null,\r\n" + //
    //                     "                                    \"maxRatioOfConcealedSamples\": null,\r\n" + //
    //                     "                                    \"averageRoundTripTime\": \"PT0.061S\",\r\n" + //
    //                     "                                    \"maxRoundTripTime\": \"PT0.079S\",\r\n" + //
    //                     "                                    \"packetUtilization\": 67,\r\n" + //
    //                     "                                    \"averageBandwidthEstimate\": 9965083,\r\n" + //
    //                     "                                    \"wasMediaBypassed\": false,\r\n" + //
    //                     "                                    \"averageAudioNetworkJitter\": \"PT0.043S\",\r\n" + //
    //                     "                                    \"maxAudioNetworkJitter\": \"PT0.046S\",\r\n" + //
    //                     "                                    \"rmsFreezeDuration\": null,\r\n" + //
    //                     "                                    \"averageFreezeDuration\": null,\r\n" + //
    //                     "                                    \"isAudioForwardErrorCorrectionUsed\": true\r\n" + //
    //                     "                                },\r\n" + //
    //                     "                                {\r\n" + //
    //                     "                                    \"streamId\": \"1785122252\",\r\n" + //
    //                     "                                    \"streamDirection\": \"calleeToCaller\",\r\n" + //
    //                     "                                    \"averageAudioDegradation\": 1.160898,\r\n" + //
    //                     "                                    \"averageJitter\": \"PT0.007S\",\r\n" + //
    //                     "                                    \"maxJitter\": \"PT0.012S\",\r\n" + //
    //                     "                                    \"averagePacketLossRate\": 0.01381693,\r\n" + //
    //                     "                                    \"maxPacketLossRate\": 0.03738318,\r\n" + //
    //                     "                                    \"averageRatioOfConcealedSamples\": 0.06233422,\r\n" + //
    //                     "                                    \"maxRatioOfConcealedSamples\": 0.07192807,\r\n" + //
    //                     "                                    \"averageRoundTripTime\": \"PT0.064S\",\r\n" + //
    //                     "                                    \"maxRoundTripTime\": \"PT0.106S\",\r\n" + //
    //                     "                                    \"packetUtilization\": 709,\r\n" + //
    //                     "                                    \"averageBandwidthEstimate\": 15644878,\r\n" + //
    //                     "                                    \"wasMediaBypassed\": false,\r\n" + //
    //                     "                                    \"averageAudioNetworkJitter\": \"PT0.266S\",\r\n" + //
    //                     "                                    \"maxAudioNetworkJitter\": \"PT0.474S\",\r\n" + //
    //                     "                                    \"rmsFreezeDuration\": null,\r\n" + //
    //                     "                                    \"averageFreezeDuration\": null,\r\n" + //
    //                     "                                    \"isAudioForwardErrorCorrectionUsed\": false\r\n" + //
    //                     "                                }\r\n" + //
    //                     "                            ]\r\n" + //
    //                     "                        }\r\n" + //
    //                     "                    ]\r\n" + //
    //                     "                }\r\n" + //
    //                     "            ]\r\n" + //
    //                     "        }\r\n" + //
    //                     "    ],\r\n" + //
    //                     "    \"@odata.nextLink\": \"https://graph.microsoft.com/v1.0/$metadata#communications/callRecords('e523d2ed-2966-4b6b-925b-754a88034cc5')/sessions?$expand=segments&$skiptoken=abc\"\r\n" + //
    //                     "}";

    //     final Response response = new Response.Builder()
    //             .request(new Request.Builder().url("https://graph.microsoft.com/v1.0/communications/callRecords/{id}/sessions?$expand=segments").build())
    //             .protocol(Protocol.HTTP_1_1)
    //             .code(200).message("").body(
    //                ResponseBody.create(
    //                     MediaType.parse("application/json"),
    //                     responseBody.getBytes()
    //             ))
    //             .build();

    //     when(remoteCall.execute()).thenReturn(response);
    //     when(okHttpClient.newCall(any())).thenReturn(remoteCall);
    //     return okHttpClient;
    // }






    // @Test
    // void testDeserializingErrorDateTime() {
    //     String dateTimeString = "2024-02-12T19:47:39";
    //     // Instant timeWithoutOffset = Instant.parse(dateTimeString);
    //     // LocalTime timeWithoutOffset = LocalTime.parse(dateTimeString, DateTimeFormatter.ISO_LOCAL_TIME);
    //     LocalDateTime dateTime = LocalDateTime.parse(dateTimeString);
    //     OffsetDateTime dateTimeWithOffset = dateTime.atOffset(ZoneOffset.UTC);
    //     System.out.println(dateTimeWithOffset);
    // }
}
