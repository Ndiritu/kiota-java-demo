/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package kiota.java.demo;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.time.LocalDateTime;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.Objects;
import java.util.concurrent.atomic.AtomicInteger;

import org.apache.commons.codec.digest.DigestUtils;
import org.junit.jupiter.api.Test;

import com.azure.core.credential.TokenCredential;
import com.azure.identity.ClientCertificateCredentialBuilder;
import com.azure.identity.ClientSecretCredentialBuilder;
import com.google.gson.JsonParser;
import com.microsoft.graph.core.content.BatchRequestContent;
import com.microsoft.graph.core.content.BatchResponseContent;
import com.microsoft.graph.core.models.IProgressCallback;
import com.microsoft.graph.core.models.UploadResult;
import com.microsoft.graph.core.requests.GraphClientFactory;
import com.microsoft.graph.core.tasks.LargeFileUploadTask;
import com.microsoft.graph.core.tasks.PageIterator;
import com.microsoft.graph.drives.item.items.item.createuploadsession.CreateUploadSessionPostRequestBody;
import com.microsoft.graph.models.Attachment;
import com.microsoft.graph.models.AttachmentItem;
import com.microsoft.graph.models.AttachmentType;
import com.microsoft.graph.models.BaseCollectionPaginationCountResponse;
import com.microsoft.graph.models.DriveItem;
import com.microsoft.graph.models.DriveItemUploadableProperties;
import com.microsoft.graph.models.Entity;
import com.microsoft.graph.models.EventCollectionResponse;
import com.microsoft.graph.models.Group;
import com.microsoft.graph.models.GroupCollectionResponse;
import com.microsoft.graph.models.Message;
import com.microsoft.graph.models.MessageCollectionResponse;
import com.microsoft.graph.models.Onenote;
import com.microsoft.graph.models.OnenotePage;
import com.microsoft.graph.models.PlannerAssignments;
import com.microsoft.graph.models.Team;
import com.microsoft.graph.models.UploadSession;
import com.microsoft.graph.models.User;
import com.microsoft.graph.models.WorkbookRange;
import com.microsoft.graph.models.odataerrors.ODataError;
import com.microsoft.graph.serviceclient.GraphServiceClient;
import com.microsoft.kiota.ApiException;
import com.microsoft.kiota.HttpMethod;
import com.microsoft.kiota.RequestInformation;
import com.microsoft.kiota.serialization.KiotaJsonSerialization;
import com.microsoft.kiota.serialization.UntypedArray;
import com.microsoft.kiota.serialization.UntypedDouble;
import com.microsoft.kiota.serialization.UntypedNode;
import com.microsoft.graph.core.authentication.AzureIdentityAuthenticationProvider;

// import okhttp3.Call;
// import okhttp3.MediaType;
// import okhttp3.OkHttpClient;
// import okhttp3.Protocol;
// import okhttp3.Request;
// import okhttp3.Response;
// import okhttp3.ResponseBody;

import java.util.List;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.io.InputStream;
import java.io.FileInputStream;
import java.io.File;
import java.net.InetSocketAddress;
import java.net.Proxy;
import java.net.URI;

class AppTest {

    final String USER_ID = "pgichuhi@sk7xg.onmicrosoft.com";

    // @Test
    // void certBasedAuthentication() {
    //     TokenCredential credential = new ClientCertificateCredentialBuilder()
    //                     .tenantId(System.getenv("kiota_tenant_id"))
    //                     .clientId(System.getenv("kiota_client_id"))
    //                     .pemCertificate("/home/ndiritu/new-certs/cert-with-private-key.pem")
    //                     .build();

    //     GraphServiceClient client = new GraphServiceClient(credential, ".default");
    //     User user = client.users().byUserId(USER_ID).get();
    //     System.out.println("User: " + user.getDisplayName());
    // }

    @Test
    void infiniteLoop() throws ReflectiveOperationException
    {
        TokenCredential credential = new ClientSecretCredentialBuilder()
                    .clientId(System.getenv("kiota_client_id"))
                    .clientSecret(System.getenv("kiota_client_secret"))
                    .tenantId(System.getenv("kiota_tenant_id"))
                    .build();

        GraphServiceClient graphClient = new GraphServiceClient(credential, ".default");

        GroupCollectionResponse groupCollectionResponse = graphClient.groups().get(
                requestConfig -> requestConfig.queryParameters.select = new String[]{"id", "displayName", "resourceProvisioningOptions"});

        // List<Group> groups = groupCollectionResponse.getValue();
        List<Group> groups = new ArrayList<>();

        PageIterator<Group, BaseCollectionPaginationCountResponse> pageIterator =
                new PageIterator.Builder<Group, BaseCollectionPaginationCountResponse>()
                        .client(graphClient)
                        .collectionPage(Objects.requireNonNull(groupCollectionResponse))
                        .collectionPageFactory(GroupCollectionResponse::createFromDiscriminatorValue)
                        .requestConfigurator(requestInfo ->
                        {
                            requestInfo.addQueryParameter("%24select", new String[]{"id", "displayName", "resourceProvisioningOptions"});
                            return requestInfo;
                        })
                        .processPageItemCallback(groups::add)
                        .build();

        pageIterator.iterate();

        for (Group group : groups)
        {
            if (isTeam(group)) {
                Team team = graphClient.teams().byTeamId(group.getId()).get();
                group.setTeam(team);
                System.out.println("Group id=" + group.getId() + ", name=" + group.getDisplayName());
            }
        }
    }

    public boolean isTeam(Group group)
    {
        Objects.requireNonNull(group);
        Objects.requireNonNull(group.getAdditionalData());

        return getAdditionalDataStringList(group, "resourceProvisioningOptions").contains("Team");
    }

    List<String> getAdditionalDataStringList(Entity entity, String key)
    {
        if (entity == null
            || key == null
            || key.isEmpty()
            || !entity.getAdditionalData().containsKey(key))
            return Collections.emptyList();

        List<String> result = new ArrayList<>();

        UntypedArray untypedArray = (UntypedArray) entity.getAdditionalData().get("resourceProvisioningOptions");
        for (UntypedNode untypedNode : untypedArray.getValue())
        {
            if (untypedNode.getValue() == null)
                continue;

            result.add(untypedNode.getValue().toString());
        }

        return result;
    }

    // @Test
    // void testGetWorkSheetCellValue() {
    //     try {
    //         TokenCredential credential = new ClientSecretCredentialBuilder()
    //             .clientId(System.getenv("kiota_client_id"))
    //             .clientSecret(System.getenv("kiota_client_secret"))
    //             .tenantId(System.getenv("kiota_tenant_id"))
    //             .build();

    //         GraphServiceClient client = new GraphServiceClient(credential, ".default");

    //         String driveId = "b!snvSw7NE8EeDp1CLO07dj3632uZ9FZhDi6IfbdhpPZBtcVvavuhNRYPmoTYXKS5e";

    //         // Drive root children
    //         List<DriveItem> rootItems = client.drives().byDriveId(driveId).items().byDriveItemId("root").children().get().getValue();

    //         // Get the workbook
    //         WorkbookRange workbook = client.drives().byDriveId(driveId).items().byDriveItemId("01TFQELTITLHSGZMCUL5GJ7ECBLDMHI53C").workbook().worksheets().byWorkbookWorksheetId("Sheet1").cellWithRowWithColumn(0, 0).get();

    //         if (workbook.getValues() != null) {
    //             String jsonString = KiotaJsonSerialization.serializeAsString(workbook.getValues());
    //             System.out.println("Json string: " + jsonString);
    //             // UntypedArray untypedValues = (UntypedArray) workbook.getValues();
    //             // java.util.List<UntypedNode> cellValuesList = (java.util.List<UntypedNode>) untypedValues.getValue();
    //             // UntypedArray untypedFirstCellValue = (UntypedArray) cellValuesList.get(0);
    //             // java.util.List<UntypedNode> cellValues = (java.util.List<UntypedNode>) untypedFirstCellValue.getValue();
    //             // Double cellValue = ((UntypedDouble) cellValues.get(0)).getValue();
    //             // System.out.println("Cell value: " + cellValue.toString());
    //         }

    //     } catch (Exception ex) {
    //         System.out.println(ex.getMessage());
    //     }
    // }

    // @Test
    // void testMultipart() {
    //     try {
    //         TokenCredential credential = new ClientSecretCredentialBuilder()
    //             .clientId(System.getenv("kiota_client_id"))
    //             .clientSecret(System.getenv("kiota_client_secret"))
    //             .tenantId(System.getenv("kiota_tenant_id"))
    //             .build();

    //         GraphServiceClient client = new GraphServiceClient(credential, ".default");

    //         String content = "--MyPartBoundary198374\r\n" + //
    //         "Content-Disposition:form-data; name=\"Presentation\"\r\n" + //
    //         "Content-Type:text/html\r\n" + //
    //         "\r\n" + //
    //         "<!DOCTYPE html>\r\n" + //
    //         "<html>\r\n" + //
    //         "  <head>\r\n" + //
    //         "    <title>A page with <i>rendered</i> images and an <b>attached</b> file</title>\r\n" + //
    //         "    <meta name=\"created\" content=\"2015-07-22T09:00:00-08:00\" />\r\n" + //
    //         "  </head>\r\n" + //
    //         "  <body>\r\n" + //
    //         "    <p>Here's an image from an online source:</p>\r\n" + //
    //         "    <img src=\"https://...\" alt=\"an image on the page\" width=\"500\" />\r\n" + //
    //         "    <p>Here's an image uploaded as binary data:</p>\r\n" + //
    //         "    <img src=\"name:imageBlock1\" alt=\"an image on the page\" width=\"300\" />\r\n" + //
    //         "    <p>Here's a file attachment:</p>\r\n" + //
    //         "    <object data-attachment=\"FileName.pdf\" data=\"name:fileBlock1\" type=\"application/pdf\" />\r\n" + //
    //         "  </body>\r\n" + //
    //         "</html>\r\n" + //
    //         "\r\n" + //
    //         "--MyPartBoundary198374\r\n" + //
    //         "Content-Disposition:form-data; name=\"imageBlock1\"\r\n" + //
    //         "Content-Type:image/jpeg\r\n" + //
    //         "\r\n" + //
    //         "... binary image data ...\r\n" + //
    //         "\r\n" + //
    //         "--MyPartBoundary198374\r\n" + //
    //         "Content-Disposition:form-data; name=\"fileBlock1\"\r\n" + //
    //         "Content-Type:application/pdf\r\n" + //
    //         "\r\n" + //
    //         "... binary file data ...\r\n" + //
    //         "\r\n" + //
    //         "--MyPartBoundary198374--";
    //         OnenotePage body = new OnenotePage();
    //         body.setContent(content.getBytes());
    //         OnenotePage response = client.users().byUserId(USER_ID).onenote().pages().post(body);
    //         System.out.println("Page created! Id=" + response.getId());

    //     } catch (Exception ex) {
    //         System.out.println(ex.getMessage());
    //     }
    // }

    // @Test
    // void testContentLengthFixes() {
    //     try {
    //         TokenCredential credential = new ClientSecretCredentialBuilder()
    //             .clientId(System.getenv("kiota_client_id"))
    //             .clientSecret(System.getenv("kiota_client_secret"))
    //             .tenantId(System.getenv("kiota_tenant_id"))
    //             .build();

    //         GraphServiceClient client = new GraphServiceClient(credential, ".default");

    //         // null/no request body
    //         String myDriveId = client.users().byUserId(USER_ID).drive().get().getId();

    //         // empty request body
    //         Message testMsg = new Message();
    //         Message newMessage = client.users().byUserId(USER_ID).messages().post(testMsg);
    //         System.out.println("Successful post! Id=" + newMessage.getId());

    //         // normal JSON request body
    //         var patchMessage = new Message();
    //         patchMessage.setSubject("ANOTHER SUBJECT!");
    //         var updatedMessage = client.users().byUserId(USER_ID).messages().byMessageId(newMessage.getId()).patch(patchMessage);
    //         System.out.println("Successful patch! Id=" + updatedMessage.getId() + ", subject=" + updatedMessage.getSubject());

    //         // stream request body: upload small file
    //         File file = new File("/home/ndiritu/projects/kiota-java-demo/app/src/test/resources/hello-world.txt");
    //         InputStream fileStream = new FileInputStream(file);
    //         DriveItem uploadedFile = client.drives()
    //                 .byDriveId(myDriveId)
    //                 .items()
    //                 .byDriveItemId("root:/test/hello-world-test.txt:")
    //                 .content()
    //                 .put(fileStream);

    //         System.out.println("Uploaded file: " + uploadedFile.getName() + " with size: " + uploadedFile.getSize());

    //     } catch (Exception ex) {
    //         System.out.println(ex.getMessage());
    //     }

    // }

    // @Test
    // void testLFUToOutlook() {
    //     try {
    //         // Read file
    //         File file = new File("/home/ndiritu/projects/kiota-java-demo/app/src/test/resources/test2mbupload.txt");
    //         InputStream fileStream = new FileInputStream(file);
    //         long streamSize = file.length();

    //         // Calculate checksum
    //         String uploadFileChecksum = DigestUtils.md5Hex(fileStream);
    //         fileStream = new FileInputStream(file);

    //         TokenCredential credential = new ClientSecretCredentialBuilder()
    //             .clientId(System.getenv("kiota_client_id"))
    //             .clientSecret(System.getenv("kiota_client_secret"))
    //             .tenantId(System.getenv("kiota_tenant_id"))
    //             .build();
    //         GraphServiceClient client = new GraphServiceClient(credential, ".default");

    //         // create new draft message
    //         Message draft = new Message();
    //         draft.setSubject("Test LFU");

    //         Message createdMessage = client.users().byUserId(USER_ID).messages().post(draft);

    //         // create upload session
    //         com.microsoft.graph.users.item.messages.item.attachments.createuploadsession.CreateUploadSessionPostRequestBody uploadSessionPostRequestBody = new com.microsoft.graph.users.item.messages.item.attachments.createuploadsession.CreateUploadSessionPostRequestBody();
    //         AttachmentItem attachmentItem = new AttachmentItem();
    //         attachmentItem.setAttachmentType(AttachmentType.File);
    //         attachmentItem.setName("Test LFU");
    //         attachmentItem.setSize(streamSize);
    //         uploadSessionPostRequestBody.setAttachmentItem(attachmentItem);

    //         UploadSession uploadSession = client.users().byUserId(USER_ID).messages().byMessageId(createdMessage.getId()).attachments().createUploadSession().post(uploadSessionPostRequestBody);

    //         int maxSliceSize = 409600;
    //         LargeFileUploadTask<AttachmentItem> largeFileUploadTask = new LargeFileUploadTask<>(
    //                 client.getRequestAdapter(),
    //                 uploadSession,
    //                 fileStream,
    //                 streamSize,
    //                 maxSliceSize,
    //                 AttachmentItem::createFromDiscriminatorValue);

    //         int maxAttempts = 5;

    //         // Create a callback used by the upload provider
    //         IProgressCallback callback = (current, max) -> System.out.println(
    //                     String.format("Uploaded %d bytes of %d total bytes", current, max));

    //         // Do the upload
    //         UploadResult<AttachmentItem> uploadResult = largeFileUploadTask.upload(maxAttempts, callback);
    //         if (uploadResult.isUploadSuccessful()) {
    //             System.out.println("Upload complete");
    //             // Print upload location from response header
    //             System.out.println("Attachment Location: " + uploadResult.location);
    //         } else {
    //             System.out.println("Upload failed");
    //         }

    //         // Get attachment ID from returned Location header value
    //         String[] splitLocationUrl = uploadResult.location.getPath().split("/", 0);
    //         String attachmentId = splitLocationUrl[splitLocationUrl.length - 1].split("'")[1];

    //         // Download attachment and validate with checksum
    //         RequestInformation requestInformation = client.users().byUserId(USER_ID).messages().byMessageId(createdMessage.getId()).attachments().byAttachmentId(attachmentId).toGetRequestInformation();
    //         requestInformation.setUri(new URI(requestInformation.getUri().toString() + "/$value"));
    //         InputStream downloadedFile = client.getRequestAdapter().sendPrimitive(requestInformation, null, InputStream.class);

    //         assertEquals(uploadFileChecksum, DigestUtils.md5Hex(downloadedFile));

    //     } catch (Exception exception) {
    //         System.out.println(exception.getMessage());
    //     }
    // }


    // @Test
    // void testLargeFileUploadToOneDrive() {
    //     try {
    //         // Read file
    //         File file = new File("/home/ndiritu/projects/kiota-java-demo/app/src/test/resources/testWorkbook.xlsx");
    //         InputStream fileStream = new FileInputStream(file);
    //         long streamSize = file.length();

    //         // Calculate checksum before upload
    //         String uploadFileChecksum = DigestUtils.md5Hex(fileStream);
    //         fileStream = new FileInputStream(file);

    //         TokenCredential credential = new ClientSecretCredentialBuilder()
    //             .clientId(System.getenv("kiota_client_id"))
    //             .clientSecret(System.getenv("kiota_client_secret"))
    //             .tenantId(System.getenv("kiota_tenant_id"))
    //             .build();

    //         CreateUploadSessionPostRequestBody uploadSessionRequest = new CreateUploadSessionPostRequestBody();
    //         DriveItemUploadableProperties properties = new DriveItemUploadableProperties();
    //         properties.getAdditionalData().put("@microsoft.graph.conflictBehavior", "replace");
    //         uploadSessionRequest.setItem(properties);

    //         GraphServiceClient client = new GraphServiceClient(credential, ".default");

    //         // Fetch root drive ID
    //         String myDriveId = client.users().byUserId(USER_ID).drive().get().getId();

    //         assertTrue(false);

    //         // Create upload session
    //         UploadSession uploadSession = client.drives()
    //                 .byDriveId(myDriveId)
    //                 .items()
    //                 .byDriveItemId("root:/test/testWorkbook.xlsx:")
    //                 .createUploadSession()
    //                 .post(uploadSessionRequest);

    //         int maxSliceSize = 409600;
    //         LargeFileUploadTask<DriveItem> largeFileUploadTask = new LargeFileUploadTask<>(
    //                 client.getRequestAdapter(),
    //                 uploadSession,
    //                 fileStream,
    //                 streamSize,
    //                 maxSliceSize,
    //                 DriveItem::createFromDiscriminatorValue);

    //         int maxAttempts = 5;
    //         // Create a callback used by the upload provider
    //         IProgressCallback callback = (current, max) -> System.out.println(
    //                     String.format("Uploaded %d bytes of %d total bytes", current, max));

    //         // Do the upload
    //         UploadResult<DriveItem> uploadResult = largeFileUploadTask.upload(maxAttempts, callback);
    //         if (uploadResult.isUploadSuccessful()) {
    //             System.out.println("Upload complete");
    //             System.out.println("Item ID: " + uploadResult.itemResponse.getId());
    //         } else {
    //             System.out.println("Upload failed");
    //         }

    //         // Use the drive item ID in the uploadResult to fetch the uploaded file
    //         DriveItem uploadedFile = client.drives()
    //                 .byDriveId(myDriveId)
    //                 .items()
    //                 .byDriveItemId(uploadResult.itemResponse.getId())
    //                 .get();

    //         assertEquals(streamSize, uploadedFile.getSize());

    //         InputStream downloadedFile = client.drives()
    //                 .byDriveId(myDriveId)
    //                 .items()
    //                 .byDriveItemId(uploadResult.itemResponse.getId())
    //                 .content()
    //                 .get();

    //         assertEquals(uploadFileChecksum, DigestUtils.md5Hex(downloadedFile));
    //         System.out.println("Hello world!");


    //     } catch (Exception exception) {
    //         System.out.println(exception.getMessage());
    //     }
    // }

    // @Test
    // void testLFUToOneDriveWithDeferCommitTrue()
    // {
    //     try {
    //         // Read file
    //         File file = new File("/home/ndiritu/projects/kiota-java-demo/app/src/test/resources/testlightupload.txt");
    //         InputStream fileStream = new FileInputStream(file);
    //         long streamSize = file.length();

    //         // Calculate checksum before upload
    //         String uploadFileChecksum = DigestUtils.md5Hex(fileStream);
    //         fileStream = new FileInputStream(file);

    //         TokenCredential credential = new ClientSecretCredentialBuilder()
    //             .clientId(System.getenv("kiota_client_id"))
    //             .clientSecret(System.getenv("kiota_client_secret"))
    //             .tenantId(System.getenv("kiota_tenant_id"))
    //             .build();

    //         CreateUploadSessionPostRequestBody uploadSessionRequest = new CreateUploadSessionPostRequestBody();
    //         DriveItemUploadableProperties properties = new DriveItemUploadableProperties();
    //         properties.getAdditionalData().put("@microsoft.graph.conflictBehavior", "replace");
    //         uploadSessionRequest.setItem(properties);

    //         // Set deferCommit to true
    //         uploadSessionRequest.getAdditionalData().put("deferCommit", true);

    //         GraphServiceClient client = new GraphServiceClient(credential, ".default");

    //         // Fetch root drive ID
    //         String myDriveId = client.users().byUserId(USER_ID).drive().get().getId();

    //         // Create upload session with deferCommit => true
    //         UploadSession uploadSession = client.drives()
    //                 .byDriveId(myDriveId)
    //                 .items()
    //                 .byDriveItemId("root:/test/testDeferCommitFalse.txt:")
    //                 .createUploadSession()
    //                 .post(uploadSessionRequest);

    //         int maxSliceSize = 409600;
    //         LargeFileUploadTask<DriveItem> largeFileUploadTask = new LargeFileUploadTask<>(
    //                 client.getRequestAdapter(),
    //                 uploadSession,
    //                 fileStream,
    //                 streamSize,
    //                 maxSliceSize,
    //                 DriveItem::createFromDiscriminatorValue);

    //         int maxAttempts = 5;
    //         // Create a callback used by the upload provider
    //         IProgressCallback callback = (current, max) -> System.out.println(
    //                     String.format("Uploaded %d bytes of %d total bytes", current, max));

    //         // Do the upload
    //         UploadResult<DriveItem> uploadResult = largeFileUploadTask.upload(maxAttempts, callback);
    //         if (!uploadResult.isUploadSuccessful()) {
    //             System.out.println("Upload failed");
    //         }

    //         // Upload is successful

    //         // Send final POST request to upload URL to complete the upload session
    //         RequestInformation requestInformation = new RequestInformation(HttpMethod.POST, uploadSession.getUploadUrl(), new HashMap<String, Object>());
    //         requestInformation.headers.add("Content-Length", "0");

    //         // Add complete() method to LFU?
    //         DriveItem completedUpload = client.getRequestAdapter().send(requestInformation, null, DriveItem::createFromDiscriminatorValue);

    //         assertEquals(streamSize, completedUpload.getSize());

    //         InputStream downloadedFile = client.drives()
    //                 .byDriveId(myDriveId)
    //                 .items()
    //                 .byDriveItemId(completedUpload.getId())
    //                 .content()
    //                 .get();

    //         assertEquals(uploadFileChecksum, DigestUtils.md5Hex(downloadedFile));

    //     } catch (Exception exception) {
    //         System.out.println(exception.getMessage());
    //     }
    // }


    // @Test
    // void testBatchingSample() {
    //         TokenCredential credential = new ClientSecretCredentialBuilder()
    //             .clientId(System.getenv("kiota_client_id"))
    //             .clientSecret(System.getenv("kiota_client_secret"))
    //             .tenantId(System.getenv("kiota_tenant_id"))
    //             .build();

    //     GraphServiceClient graphClient = new GraphServiceClient(credential, ".default");
    //     try {
    //         // Create the batch request content with the steps
    //         final BatchRequestContent batchRequestContent = new BatchRequestContent(graphClient);

    //         // Use the Graph client to generate the requestInformation object for GET /me
    //         final RequestInformation meRequestInformation = graphClient.me().toGetRequestInformation();

    //         final ZoneOffset localTimeZone = OffsetDateTime.now().getOffset();
    //         final OffsetDateTime today = OffsetDateTime.of(
    //             LocalDate.now(),
    //             LocalTime.MIDNIGHT, localTimeZone);
    //         final OffsetDateTime tomorrow = today.plusDays(1);

    //         // Use the Graph client to generate the requestInformation for
    //         // GET /me/calendarView?startDateTime="start"&endDateTime="end"
    //         RequestInformation calenderViewRequestInformation = graphClient.me()
    //             .calendarView().toGetRequestInformation(requestConfiguration -> {
    //                 requestConfiguration.queryParameters.startDateTime = today.toString();
    //                 requestConfiguration.queryParameters.endDateTime = tomorrow.toString();
    //             });

    //         // Add the requestInformation objects to the batch request content
    //         final String meRequestId = batchRequestContent.addBatchRequestStep(meRequestInformation);
    //         final String calendarViewRequestStepId = batchRequestContent.addBatchRequestStep(calenderViewRequestInformation);

    //         // Send the batch request content to the /$batch endpoint
    //         final BatchResponseContent batchResponseContent = Objects.requireNonNull(
    //             graphClient.getBatchRequestBuilder().post(batchRequestContent, null));

    //         // Get the user response using the id assigned to the request
    //         final User me = batchResponseContent.getResponseById(
    //             meRequestId,
    //             User::createFromDiscriminatorValue
    //         );
    //         System.out.println(String.format("Hello %s!", me.getDisplayName()));

    //         // Get the calendar view response by id
    //         final EventCollectionResponse eventsResponse = Objects.requireNonNull(
    //             batchResponseContent.getResponseById(calendarViewRequestStepId,
    //                 EventCollectionResponse::createFromDiscriminatorValue));

    //         System.out.println(String.format("You have %d events on your calendar today",
    //             Objects.requireNonNull(eventsResponse.getValue()).size()));

    //     } catch (Exception ex) {
    //         System.out.println(ex.getMessage());
    //     }
    // }



    // @Test void testErrorHandling() {
    //     TokenCredential credential = new ClientSecretCredentialBuilder()
    //         .clientId(System.getenv("kiota_client_id"))
    //         .clientSecret(System.getenv("kiota_client_secret"))
    //         .tenantId(System.getenv("kiota_tenant_id"))
    //         .build();

    //     GraphServiceClient client = new GraphServiceClient(credential, ".default");
    //     try {
    //         // Gets invalid user
    //         User user = client.users().byUserId("invalidUser@sk7xg.onmicrosoft.com").get();

    //         // read invalid sites

    //         // var contacts = client.users().byUserId(USER_ID).

    //         // var security = client.security().informationProtection().sensitivityLabels().get();

    //         // var sites = client.sites().get();
    //         System.out.println("done");
    //         } catch (ODataError err) {
    //             System.out.println(err.getError().getCode());
    //             System.out.println(err.getResponseStatusCode());
    //             System.out.println(err.getMessage());
    //         }
    // }

    // @Test void testPageIterator() {
    //     TokenCredential credential = new ClientSecretCredentialBuilder()
    //         .clientId(System.getenv("kiota_client_id"))
    //         .clientSecret(System.getenv("kiota_client_secret"))
    //         .tenantId(System.getenv("kiota_tenant_id"))
    //         .build();

    //     GraphServiceClient client = new GraphServiceClient(credential, ".default");
    //     try {
    //         MessageCollectionResponse messages = client.users().byUserId("pgichuhi@sk7xg.onmicrosoft.com").messages().get();

    //         AtomicInteger numMessages = new AtomicInteger(0);

    //         // Default page size is 10 messages

    //         PageIterator<Message, MessageCollectionResponse> pageIterator = new PageIterator.Builder<Message, MessageCollectionResponse>()
    //                                 .client(client)
    //                                 .collectionPage(messages)
    //                                 .collectionPageFactory(MessageCollectionResponse::createFromDiscriminatorValue)
    //                                 .processPageItemCallback(message -> {
    //                                     System.out.println("MsgNumber: " + numMessages.incrementAndGet() + " Subject: " + message.getSubject());
    //                                     return true;
    //                                 })
    //                                 .build();
    //         pageIterator.iterate();

    //         System.out.println("Num of messages: " + numMessages.get());

    //     } catch (Exception ex) {
    //         System.out.println(ex.getMessage());
    //     }
    // }

    // @Test
    // void testBatchRequest() {
    //     TokenCredential credential = new ClientSecretCredentialBuilder()
    //         .clientId(System.getenv("kiota_client_id"))
    //         .clientSecret(System.getenv("kiota_client_secret"))
    //         .tenantId(System.getenv("kiota_tenant_id"))
    //         .build();

    //     GraphServiceClient client = new GraphServiceClient(credential, ".default");
    //     try {
    //         List<Message> messagesToUpdate = new ArrayList<>();

    //         int counter = 0;
    //         for (Message message : client.users().byUserId(USER_ID).messages().get().getValue()) {
    //             if (counter > 5) {
    //                 break;
    //             }
    //             message.setIsRead(!message.getIsRead());
    //             messagesToUpdate.add(message);
    //             counter ++;
    //             break;
    //         }

    //         BatchRequestContent batchRequestContent = new BatchRequestContent(client);
    //         messagesToUpdate.forEach(message -> {
    //             client.users().byUserId(USER_ID).messages().byMessageId(message.getId()).patch(message);
    //             batchRequestContent.addBatchRequestStep(client.users().byUserId(USER_ID).messages().byMessageId(message.getId()).toPatchRequestInformation(message));
    //         });

    //         BatchResponseContent batchResponseContent = client.getBatchRequestBuilder().post(batchRequestContent, null);
    //         var responses = batchResponseContent.getResponses();
    //     } catch (ApiException ex) {
    //         System.out.println(ex.getMessage());
    //     } catch (Exception ex) {
    //         System.out.println(ex.getMessage());
    //     }
    // }


    // @Test
    // void testPatchEmail() {
    //     TokenCredential credential = new ClientSecretCredentialBuilder()
    //         .clientId(System.getenv("kiota_client_id"))
    //         .clientSecret(System.getenv("kiota_client_secret"))
    //         .tenantId(System.getenv("kiota_tenant_id"))
    //         .build();

    //     GraphServiceClient client = new GraphServiceClient(credential, ".default");
    //     try {
    //         Message testMsg = new Message();
    //         testMsg.setSubject("Test Subject");

    //         Message newMessage = client.users().byUserId(USER_ID).messages().post(testMsg);
    //         System.out.println("Successful post! Id=" + newMessage.getId() + ", subject=" + newMessage.getSubject());

    //         Message patchMessage = new Message();
    //         // patchMessage.setSubject("ANOTHER SUBJECT!");
    //         Message updatedMessage = client.users().byUserId(USER_ID).messages().byMessageId(newMessage.getId()).patch(patchMessage);
    //         System.out.println("Successful patch! Id=" + updatedMessage.getId() + ", subject=" + updatedMessage.getSubject());


    //     } catch (ApiException ex) {
    //         System.out.println(ex.getMessage());
    //     } catch (Exception ex) {
    //         System.out.println(ex.getMessage());
    //     }
    // }

    // @Test
    // void testExpandSessionsInCallRecord() {
    //     TokenCredential credential = new ClientSecretCredentialBuilder()
    //         .clientId(System.getenv("kiota_client_id"))
    //         .clientSecret(System.getenv("kiota_client_secret"))
    //         .tenantId(System.getenv("kiota_tenant_id"))
    //         .build();

    //     GraphServiceClient client = new GraphServiceClient(credential, ".default");
    //     try {
    //         var callRecords = client.communications().callRecords().get();
    //         for (var callRecord : callRecords.getValue()) {
    //             System.out.println("Call record id: " + callRecord.getId());
    //             var sessions = client.communications().callRecords().byCallRecordId(callRecord.getId()).sessions().get(
    //                 requestConfig -> {
    //                     requestConfig.queryParameters.expand = new String[] {"segments"};
    //                 }
    //             ).getValue();
    //             for (var session : sessions) {
    //                 System.out.println("Session id: " + session.getId());
    //                 var segments = session.getSegments();
    //                 for (var segment : segments) {
    //                     System.out.println("Segment id: " + segment.getId());
    //                 }
    //             }
    //         }
    //     } catch (ApiException ex) {
    //         System.out.println(ex.getMessage());
    //     } catch (Exception ex) {
    //         System.out.println(ex.getMessage());
    //     }
    // }

    // @Test
    // void testExpandSegmentUsingMock() {
    //     TokenCredential credential = new ClientSecretCredentialBuilder()
    //         .clientId(System.getenv("kiota_client_id"))
    //         .clientSecret(System.getenv("kiota_client_secret"))
    //         .tenantId(System.getenv("kiota_tenant_id"))
    //         .build();

    //     try {
    //         var mockHttpClient = getMockHttpClient();
    //         GraphServiceClient client = new GraphServiceClient(
    //             new AzureIdentityAuthenticationProvider(credential, new String[] {}, ".default"),
    //             mockHttpClient
    //         );

    //         // var callRecords = client.communications().callRecords().get();
    //         // for (var callRecord : callRecords.getValue()) {
    //         //     System.out.println("Call record id: " + callRecord.getId());
    //             var sessions = client.communications().callRecords().byCallRecordId("id").sessions().get(
    //                 requestConfig -> {
    //                     requestConfig.queryParameters.expand = new String[] {"segments"};
    //                 }
    //             ).getValue();
    //             for (var session : sessions) {
    //                 System.out.println("Session id: " + session.getId());
    //                 var segments = session.getSegments();
    //                 for (var segment : segments) {
    //                     System.out.println("Segment id: " + segment.getId());
    //                 }
    //             }
    //         // }
    //     } catch (ApiException ex) {
    //         System.out.println(ex.getMessage());
    //     } catch (Exception ex) {
    //         System.out.println(ex.getMessage());
    //     }
    // }

    // @Test
    // void createPlannerTask() {
    //     TokenCredential credential = new ClientSecretCredentialBuilder()
    //         .clientId(System.getenv("kiota_client_id"))
    //         .clientSecret(System.getenv("kiota_client_secret"))
    //         .tenantId(System.getenv("kiota_tenant_id"))
    //         .build();

    //     GraphServiceClient client = new GraphServiceClient(credential, ".default");
    //     try {
    //         var task = new com.microsoft.graph.models.PlannerTask();
    //         task.setPlanId("Rr9IbmXPmkeLOUWMYUEpp2UACmbZ");
    //         task.setTitle("Task 1");
    //         PlannerAssignments assignments = new PlannerAssignments();
    //         HashMap<String, Object> additionalData = new HashMap<>();
    //         // additionalData.put(USER_ID, "{\"@odata.type\":\"#microsoft.graph.plannerAssignment\",\"orderHint\":\" !\"}");
    //         additionalData.put(USER_ID, JsonParser.parseString("{\"@odata.type\":\"#microsoft.graph.plannerAssignment\",\"orderHint\":\" !\"}").getAsJsonObject());
    //         assignments.setAdditionalData(additionalData);
    //         task.setAssignments(assignments);
    //         var newTask = client.users().byUserId(USER_ID).planner().tasks().post(task);
    //         System.out.println("Task created! Id=" + newTask.getId() + ", title=" + newTask.getTitle());
    //     } catch (ApiException ex) {
    //         System.out.println(ex.getMessage());
    //     } catch (Exception ex) {
    //         System.out.println(ex.getMessage());
    //     }
    // }

    // OkHttpClient getMockHttpClient() throws Exception {
    //     final OkHttpClient okHttpClient = mock(OkHttpClient.class);

    //     final Call remoteCall = mock(Call.class);

    //     final String responseBody = "{\r\n" + //
    //                     "    \"@odata.context\": \"https://graph.microsoft.com/v1.0/$metadata#communications/callRecords('e523d2ed-2966-4b6b-925b-754a88034cc5')/sessions\",\r\n" + //
    //                     "    \"value\": [\r\n" + //
    //                     "        {\r\n" + //
    //                     "            \"id\": \"e523d2ed-2966-4b6b-925b-754a88034cc5\",\r\n" + //
    //                     "            \"modalities\": [\r\n" + //
    //                     "                \"audio\"\r\n" + //
    //                     "            ],\r\n" + //
    //                     "            \"startDateTime\": \"2020-02-25T18:52:21.2169889Z\",\r\n" + //
    //                     "            \"endDateTime\": \"2020-02-25T18:52:46.7640013Z\",\r\n" + //
    //                     "            \"isTest\": false,\r\n" + //
    //                     "            \"caller\": {\r\n" + //
    //                     "                \"@odata.type\": \"#microsoft.graph.callRecords.participantEndpoint\",\r\n" + //
    //                     "                \"name\": \"machineName_1\",\r\n" + //
    //                     "                \"cpuName\": \"AMD EPYC 7452 32-Core Processor\",\r\n" + //
    //                     "                \"cpuCoresCount\": 8,\r\n" + //
    //                     "                \"cpuProcessorSpeedInMhz\": 2346,\r\n" + //
    //                     "                \"userAgent\": {\r\n" + //
    //                     "                    \"@odata.type\": \"#microsoft.graph.callRecords.clientUserAgent\",\r\n" + //
    //                     "                    \"headerValue\": \"RTCC/7.0.0.0 UCWA/7.0.0.0 AndroidLync/6.25.0.27 (SM-G930U Android 8.0.0)\",\r\n" + //
    //                     "                    \"platform\": \"android\",\r\n" + //
    //                     "                    \"productFamily\": \"skypeForBusiness\"\r\n" + //
    //                     "                },\r\n" + //
    //                     "                \"identity\": {\r\n" + //
    //                     "                    \"@odata.type\": \"#microsoft.graph.identitySet\",\r\n" + //
    //                     "                    \"user\": {\r\n" + //
    //                     "                        \"id\": \"821809f5-0000-0000-0000-3b5136c0e777\",\r\n" + //
    //                     "                        \"displayName\": \"Abbie Wilkins\",\r\n" + //
    //                     "                        \"tenantId\": \"dc368399-474c-4d40-900c-6265431fd81f\"\r\n" + //
    //                     "                    }\r\n" + //
    //                     "                }\r\n" + //
    //                     "            },\r\n" + //
    //                     "            \"callee\": {\r\n" + //
    //                     "                \"@odata.type\": \"#microsoft.graph.callRecords.participantEndpoint\",\r\n" + //
    //                     "                \"name\": \"machineName_2\",\r\n" + //
    //                     "                \"cpuName\": \"Intel(R) Xeon(R) Platinum 8272CL CPU @ 2.60GHz\",\r\n" + //
    //                     "                \"cpuCoresCount\": 2,\r\n" + //
    //                     "                \"cpuProcessorSpeedInMhz\": 2594,\r\n" + //
    //                     "                \"userAgent\": {\r\n" + //
    //                     "                    \"@odata.type\": \"#microsoft.graph.callRecords.clientUserAgent\",\r\n" + //
    //                     "                    \"headerValue\": \"UCCAPI/16.0.12527.20122 OC/16.0.12527.20194 (Skype for Business)\",\r\n" + //
    //                     "                    \"platform\": \"windows\",\r\n" + //
    //                     "                    \"productFamily\": \"skypeForBusiness\"\r\n" + //
    //                     "                },\r\n" + //
    //                     "                \"identity\": {\r\n" + //
    //                     "                    \"user\": {\r\n" + //
    //                     "                        \"id\": \"f69e2c00-0000-0000-0000-185e5f5f5d8a\",\r\n" + //
    //                     "                        \"displayName\": \"Owen Franklin\",\r\n" + //
    //                     "                        \"tenantId\": \"dc368399-474c-4d40-900c-6265431fd81f\"\r\n" + //
    //                     "                    }\r\n" + //
    //                     "                },\r\n" + //
    //                     "                \"feedback\": {\r\n" + //
    //                     "                    \"rating\": \"poor\",\r\n" + //
    //                     "                    \"tokens\": {\r\n" + //
    //                     "                        \"NoSound\": false,\r\n" + //
    //                     "                        \"OtherNoSound\": false,\r\n" + //
    //                     "                        \"Echo\": false,\r\n" + //
    //                     "                        \"Noisy\": true,\r\n" + //
    //                     "                        \"LowVolume\": false,\r\n" + //
    //                     "                        \"Stopped\": false,\r\n" + //
    //                     "                        \"DistortedSound\": false,\r\n" + //
    //                     "                        \"Interruptions\": false\r\n" + //
    //                     "                    }\r\n" + //
    //                     "                }\r\n" + //
    //                     "            },\r\n" + //
    //                     "            \"segments\": [\r\n" + //
    //                     "                {\r\n" + //
    //                     "                    \"startDateTime\": \"2020-02-25T18:52:21.2169889Z\",\r\n" + //
    //                     "                    \"endDateTime\": \"2020-02-25T18:52:46.7640013Z\",\r\n" + //
    //                     "                    \"id\": \"e523d2ed-2966-4b6b-925b-754a88034cc5\",\r\n" + //
    //                     "                    \"caller\": {\r\n" + //
    //                     "                        \"@odata.type\": \"#microsoft.graph.callRecords.participantEndpoint\",\r\n" + //
    //                     "                        \"name\": \"machineName_1\",\r\n" + //
    //                     "                        \"cpuName\": \"AMD EPYC 7452 32-Core Processor\",\r\n" + //
    //                     "                        \"cpuCoresCount\": 8,\r\n" + //
    //                     "                        \"cpuProcessorSpeedInMhz\": 2346,\r\n" + //
    //                     "                        \"userAgent\": {\r\n" + //
    //                     "                            \"@odata.type\": \"#microsoft.graph.callRecords.clientUserAgent\",\r\n" + //
    //                     "                            \"headerValue\": \"RTCC/7.0.0.0 UCWA/7.0.0.0 AndroidLync/6.25.0.27 (SM-G930U Android 8.0.0)\",\r\n" + //
    //                     "                            \"platform\": \"android\",\r\n" + //
    //                     "                            \"productFamily\": \"skypeForBusiness\"\r\n" + //
    //                     "                        },\r\n" + //
    //                     "                        \"identity\": {\r\n" + //
    //                     "                            \"user\": {\r\n" + //
    //                     "                                \"id\": \"821809f5-0000-0000-0000-3b5136c0e777\",\r\n" + //
    //                     "                                \"displayName\": \"Abbie Wilkins\",\r\n" + //
    //                     "                                \"tenantId\": \"dc368399-474c-4d40-900c-6265431fd81f\"\r\n" + //
    //                     "                            }\r\n" + //
    //                     "                        }\r\n" + //
    //                     "                    },\r\n" + //
    //                     "                    \"callee\": {\r\n" + //
    //                     "                        \"@odata.type\": \"#microsoft.graph.callRecords.participantEndpoint\",\r\n" + //
    //                     "                        \"@odata.type\": \"#microsoft.graph.callRecords.participantEndpoint\",\r\n" + //
    //                     "                        \"name\": \"machineName_2\",\r\n" + //
    //                     "                        \"cpuName\": \"Intel(R) Xeon(R) Platinum 8272CL CPU @ 2.60GHz\",\r\n" + //
    //                     "                        \"cpuCoresCount\": 2,\r\n" + //
    //                     "                        \"userAgent\": {\r\n" + //
    //                     "                            \"@odata.type\": \"#microsoft.graph.callRecords.clientUserAgent\",\r\n" + //
    //                     "                            \"headerValue\": \"UCCAPI/16.0.12527.20122 OC/16.0.12527.20194 (Skype for Business)\",\r\n" + //
    //                     "                            \"platform\": \"windows\",\r\n" + //
    //                     "                            \"productFamily\": \"skypeForBusiness\"\r\n" + //
    //                     "                        },\r\n" + //
    //                     "                        \"identity\": {\r\n" + //
    //                     "                            \"user\": {\r\n" + //
    //                     "                                \"id\": \"f69e2c00-0000-0000-0000-185e5f5f5d8a\",\r\n" + //
    //                     "                                \"displayName\": \"Owen Franklin\",\r\n" + //
    //                     "                                \"tenantId\": \"dc368399-474c-4d40-900c-6265431fd81f\"\r\n" + //
    //                     "                            }\r\n" + //
    //                     "                        }\r\n" + //
    //                     "                    },\r\n" + //
    //                     "                    \"media\": [\r\n" + //
    //                     "                        {\r\n" + //
    //                     "                            \"label\": \"main-audio\",\r\n" + //
    //                     "                            \"callerNetwork\": {\r\n" + //
    //                     "                                \"ipAddress\": \"10.150.0.2\",\r\n" + //
    //                     "                                \"subnet\": \"10.150.0.0\",\r\n" + //
    //                     "                                \"linkSpeed\": 54000000,\r\n" + //
    //                     "                                \"connectionType\": \"wifi\",\r\n" + //
    //                     "                                \"port\": 27288,\r\n" + //
    //                     "                                \"reflexiveIPAddress\": \"127.0.0.2\",\r\n" + //
    //                     "                                \"relayIPAddress\": \"52.114.188.32\",\r\n" + //
    //                     "                                \"relayPort\": 53889,\r\n" + //
    //                     "                                \"macAddress\": \"00-00-00-00-00-00\",\r\n" + //
    //                     "                                \"dnsSuffix\": null,\r\n" + //
    //                     "                                \"sentQualityEventRatio\": 0,\r\n" + //
    //                     "                                \"receivedQualityEventRatio\": 0.27,\r\n" + //
    //                     "                                \"delayEventRatio\": 0,\r\n" + //
    //                     "                                \"bandwidthLowEventRatio\": 0\r\n" + //
    //                     "                            },\r\n" + //
    //                     "                            \"calleeNetwork\": {\r\n" + //
    //                     "                                \"ipAddress\": \"10.139.0.12\",\r\n" + //
    //                     "                                \"subnet\": \"10.139.80.0\",\r\n" + //
    //                     "                                \"linkSpeed\": 4294967295,\r\n" + //
    //                     "                                \"connectionType\": \"wired\",\r\n" + //
    //                     "                                \"port\": 50011,\r\n" + //
    //                     "                                \"reflexiveIPAddress\": \"127.0.0.2\",\r\n" + //
    //                     "                                \"relayIPAddress\": \"52.114.188.102\",\r\n" + //
    //                     "                                \"relayPort\": 52810,\r\n" + //
    //                     "                                \"macAddress\": \"00-00-00-00-00-00-00-00\",\r\n" + //
    //                     "                                \"dnsSuffix\": null,\r\n" + //
    //                     "                                \"sentQualityEventRatio\": 0.31,\r\n" + //
    //                     "                                \"receivedQualityEventRatio\": 0,\r\n" + //
    //                     "                                \"delayEventRatio\": 0,\r\n" + //
    //                     "                                \"bandwidthLowEventRatio\": 0\r\n" + //
    //                     "                            },\r\n" + //
    //                     "                            \"callerDevice\": {\r\n" + //
    //                     "                                \"captureDeviceName\": \"Default input device\",\r\n" + //
    //                     "                                \"renderDeviceName\": \"Default output device\",\r\n" + //
    //                     "                                \"receivedSignalLevel\": -10,\r\n" + //
    //                     "                                \"receivedNoiseLevel\": -68,\r\n" + //
    //                     "                                \"initialSignalLevelRootMeanSquare\": 60.25816,\r\n" + //
    //                     "                                \"renderZeroVolumeEventRatio\": 1,\r\n" + //
    //                     "                                \"renderMuteEventRatio\": 1,\r\n" + //
    //                     "                                \"micGlitchRate\": 23,\r\n" + //
    //                     "                                \"speakerGlitchRate\": 3830\r\n" + //
    //                     "                            },\r\n" + //
    //                     "                            \"calleeDevice\": {\r\n" + //
    //                     "                                \"captureDeviceName\": \"Microphone (Microsoft Virtual Audio Device (Simple) (WDM))\",\r\n" + //
    //                     "                                \"captureDeviceDriver\": \"Microsoft: 5.0.8638.1100\",\r\n" + //
    //                     "                                \"renderDeviceName\": \"Speakers (Microsoft Virtual Audio Device (Simple) (WDM))\",\r\n" + //
    //                     "                                \"renderDeviceDriver\": \"Microsoft: 5.0.8638.1100\",\r\n" + //
    //                     "                                \"receivedSignalLevel\": -14,\r\n" + //
    //                     "                                \"receivedNoiseLevel\": -86,\r\n" + //
    //                     "                                \"initialSignalLevelRootMeanSquare\": 146.7885,\r\n" + //
    //                     "                                \"micGlitchRate\": 143,\r\n" + //
    //                     "                                \"speakerGlitchRate\": 182\r\n" + //
    //                     "                            },\r\n" + //
    //                     "                            \"streams\": [\r\n" + //
    //                     "                                {\r\n" + //
    //                     "                                    \"streamId\": \"1504545584\",\r\n" + //
    //                     "                                    \"streamDirection\": \"callerToCallee\",\r\n" + //
    //                     "                                    \"averageAudioDegradation\": null,\r\n" + //
    //                     "                                    \"averageJitter\": \"PT0.016S\",\r\n" + //
    //                     "                                    \"maxJitter\": \"PT0.021S\",\r\n" + //
    //                     "                                    \"averagePacketLossRate\": 0,\r\n" + //
    //                     "                                    \"maxPacketLossRate\": 0,\r\n" + //
    //                     "                                    \"averageRatioOfConcealedSamples\": null,\r\n" + //
    //                     "                                    \"maxRatioOfConcealedSamples\": null,\r\n" + //
    //                     "                                    \"averageRoundTripTime\": \"PT0.061S\",\r\n" + //
    //                     "                                    \"maxRoundTripTime\": \"PT0.079S\",\r\n" + //
    //                     "                                    \"packetUtilization\": 67,\r\n" + //
    //                     "                                    \"averageBandwidthEstimate\": 9965083,\r\n" + //
    //                     "                                    \"wasMediaBypassed\": false,\r\n" + //
    //                     "                                    \"averageAudioNetworkJitter\": \"PT0.043S\",\r\n" + //
    //                     "                                    \"maxAudioNetworkJitter\": \"PT0.046S\",\r\n" + //
    //                     "                                    \"rmsFreezeDuration\": null,\r\n" + //
    //                     "                                    \"averageFreezeDuration\": null,\r\n" + //
    //                     "                                    \"isAudioForwardErrorCorrectionUsed\": true\r\n" + //
    //                     "                                },\r\n" + //
    //                     "                                {\r\n" + //
    //                     "                                    \"streamId\": \"1785122252\",\r\n" + //
    //                     "                                    \"streamDirection\": \"calleeToCaller\",\r\n" + //
    //                     "                                    \"averageAudioDegradation\": 1.160898,\r\n" + //
    //                     "                                    \"averageJitter\": \"PT0.007S\",\r\n" + //
    //                     "                                    \"maxJitter\": \"PT0.012S\",\r\n" + //
    //                     "                                    \"averagePacketLossRate\": 0.01381693,\r\n" + //
    //                     "                                    \"maxPacketLossRate\": 0.03738318,\r\n" + //
    //                     "                                    \"averageRatioOfConcealedSamples\": 0.06233422,\r\n" + //
    //                     "                                    \"maxRatioOfConcealedSamples\": 0.07192807,\r\n" + //
    //                     "                                    \"averageRoundTripTime\": \"PT0.064S\",\r\n" + //
    //                     "                                    \"maxRoundTripTime\": \"PT0.106S\",\r\n" + //
    //                     "                                    \"packetUtilization\": 709,\r\n" + //
    //                     "                                    \"averageBandwidthEstimate\": 15644878,\r\n" + //
    //                     "                                    \"wasMediaBypassed\": false,\r\n" + //
    //                     "                                    \"averageAudioNetworkJitter\": \"PT0.266S\",\r\n" + //
    //                     "                                    \"maxAudioNetworkJitter\": \"PT0.474S\",\r\n" + //
    //                     "                                    \"rmsFreezeDuration\": null,\r\n" + //
    //                     "                                    \"averageFreezeDuration\": null,\r\n" + //
    //                     "                                    \"isAudioForwardErrorCorrectionUsed\": false\r\n" + //
    //                     "                                }\r\n" + //
    //                     "                            ]\r\n" + //
    //                     "                        }\r\n" + //
    //                     "                    ]\r\n" + //
    //                     "                }\r\n" + //
    //                     "            ]\r\n" + //
    //                     "        }\r\n" + //
    //                     "    ],\r\n" + //
    //                     "    \"@odata.nextLink\": \"https://graph.microsoft.com/v1.0/$metadata#communications/callRecords('e523d2ed-2966-4b6b-925b-754a88034cc5')/sessions?$expand=segments&$skiptoken=abc\"\r\n" + //
    //                     "}";

    //     final Response response = new Response.Builder()
    //             .request(new Request.Builder().url("https://graph.microsoft.com/v1.0/communications/callRecords/{id}/sessions?$expand=segments").build())
    //             .protocol(Protocol.HTTP_1_1)
    //             .code(200).message("").body(
    //                ResponseBody.create(
    //                     MediaType.parse("application/json"),
    //                     responseBody.getBytes()
    //             ))
    //             .build();

    //     when(remoteCall.execute()).thenReturn(response);
    //     when(okHttpClient.newCall(any())).thenReturn(remoteCall);
    //     return okHttpClient;
    // }






    // @Test
    // void testDeserializingErrorDateTime() {
    //     String dateTimeString = "2024-02-12T19:47:39";
    //     // Instant timeWithoutOffset = Instant.parse(dateTimeString);
    //     // LocalTime timeWithoutOffset = LocalTime.parse(dateTimeString, DateTimeFormatter.ISO_LOCAL_TIME);
    //     LocalDateTime dateTime = LocalDateTime.parse(dateTimeString);
    //     OffsetDateTime dateTimeWithOffset = dateTime.atOffset(ZoneOffset.UTC);
    //     System.out.println(dateTimeWithOffset);
    // }
}
